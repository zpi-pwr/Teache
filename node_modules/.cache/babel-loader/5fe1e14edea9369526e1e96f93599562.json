{"ast":null,"code":"import _classCallCheck from \"/home/przemek/Data/Programowanie/PWr/ZPI/Teache/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/przemek/Data/Programowanie/PWr/ZPI/Teache/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/przemek/Data/Programowanie/PWr/ZPI/Teache/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/przemek/Data/Programowanie/PWr/ZPI/Teache/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/przemek/Data/Programowanie/PWr/ZPI/Teache/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/przemek/Data/Programowanie/PWr/ZPI/Teache/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/przemek/Data/Programowanie/PWr/ZPI/Teache/src/components/Metamask.js\";\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    & .inputField {\\n        width: 24vw;\\n        height: 4vh;\\n        background: transparent;\\n        border: 2px solid grey;\\n        border-radius: 10px;\\n        padding: 1.5vh 1vw 1.5vh 1vw;\\n    }\\n\\n    & #amountField {\\n        margin-left: 1vw;\\n        margin-right: 1vw;\\n    }\\n\\n    & .selectField {\\n        width: 24vw;\\n        height: 4vh;\\n        background: transparent;\\n        margin-left: 1vw;\\n        margin-right: 1vw;\\n        border: 2px solid grey;\\n        border-radius: 10px;\\n        text-indent: 1vw;\\n    }\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    background-color: lightgreen;\\n\\n    &:hover {\\n        background-color: darkgreen;\\n        border: 2px solid white;\\n    }\\n\\n    margin-left: 2vw;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    background-color: palevioletred;\\n    padding: 0.75rem 1.5rem;\\n    color: white;\\n    border: transparent;\\n    margin-top: 2em;\\n    margin-bottom: 2em;\\n\\n    border-radius: 0.5em;\\n\\n    &:hover {\\n        background-color: darkvioletred;\\n        border: 2px solid white;\\n    }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    max-width: 50vw;\\n    max-height: 50vh;\\n    height: auto;\\n    width: auto;\\n    object-fit: contain;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    align-items: center;\\n    text-align: center;\\n    padding: 2vh 1.5vw 2vh 1.5vw;\\n    z-index: 1000;\\n    position: absolute;\\n    background: #ffffff;\\n    left: 50%;\\n    top: 50%;\\n    transform: translateX(-50%) translateY(-50%);\\n    border-radius: 15px;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    color: #000000\\n\\n    & > .metamask-title {\\n        font-size: 3vh;\\n    }\\n\\n    & > .metamask-message {\\n        font-size: 1.5vh;\\n    }\\n\\n    & > .metamask-unlock {\\n        font-size: 2vh;\\n    }\\n\\n    padding-top: 1em;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { getConversationGql } from '../queries/gql';\nimport { graphql } from 'react-apollo';\nimport { apolloClient } from '../apollo';\nvar Text = styled.div(_templateObject());\nvar FormWindow = styled.div(_templateObject2());\nvar MetamaskImage = styled.img(_templateObject3());\nvar BackButton = styled.button(_templateObject4());\nvar SendButton = styled(BackButton)(_templateObject5());\nvar TransferForm = styled.form(_templateObject6());\nexport var InstallMetamask =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(InstallMetamask, _Component);\n\n  function InstallMetamask() {\n    _classCallCheck(this, InstallMetamask);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(InstallMetamask).apply(this, arguments));\n  }\n\n  _createClass(InstallMetamask, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.props.show) {\n        return null;\n      }\n\n      return React.createElement(FormWindow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"image download-metamask\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"metamask-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"You have to install Metamask to use our token system!\"), React.createElement(\"p\", {\n        className: \"metamask-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Click on the image below to install Metamask extension\")), React.createElement(\"a\", {\n        href: \"https://metamask.io/\",\n        rel: \"noopener noreferrer\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(MetamaskImage, {\n        src: \"https://metamask.io/img/metamask.png\",\n        alt: \"Metamask icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }))), React.createElement(BackButton, {\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"CLOSE\"));\n    }\n  }]);\n\n  return InstallMetamask;\n}(Component);\nInstallMetamask.propTypes = {\n  close: PropTypes.func.isRequired,\n  show: PropTypes.bool\n};\nexport var UnlockMetamask =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(UnlockMetamask, _Component2);\n\n  function UnlockMetamask() {\n    _classCallCheck(this, UnlockMetamask);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(UnlockMetamask).apply(this, arguments));\n  }\n\n  _createClass(UnlockMetamask, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.props.show) {\n        return null;\n      }\n\n      return React.createElement(FormWindow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"notification is-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"metamask-unlock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Your account is locked! Please unlock your Metamask vault!\")), React.createElement(BackButton, {\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"CLOSE\")));\n    }\n  }]);\n\n  return UnlockMetamask;\n}(Component);\nexport var TokenTransferForm =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(TokenTransferForm, _Component3);\n\n  function TokenTransferForm() {\n    var _this;\n\n    _classCallCheck(this, TokenTransferForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TokenTransferForm).call(this));\n\n    _this.handleAmountChange = function (event) {\n      _this.setState({\n        amount: event.target.value\n      });\n    };\n\n    _this.sendTokens = function (targetAddress) {\n      var amount = _this.state.amount;\n      var teacheCoin = _this.props.teacheCoin;\n\n      if (amount <= teacheCoin.balance && amount > 0) {\n        teacheCoin.token.transfer(_this.state.targetAddress, amount * teacheCoin.decimal, function (error, response) {\n          if (error || error !== null) {\n            console.log(error);\n          } else {\n            _this.closeDialog();\n          }\n        });\n      }\n    };\n\n    _this.closeDialog = function () {\n      _this.setState({\n        loadedUsers: false\n      });\n\n      _this.props.close();\n    };\n\n    _this.selectTarget = function (event) {\n      _this.setState({\n        targetAddress: event.target.value\n      }, function () {\n        console.log(_this.state.targetAddress);\n      });\n    };\n\n    _this.state = {\n      amount: 0,\n      targetAddress: null,\n      data: null,\n      loadedUsers: false\n    };\n    return _this;\n  }\n\n  _createClass(TokenTransferForm, [{\n    key: \"getConvData\",\n    value: function getConvData() {\n      var _this2 = this;\n\n      if (this.props.show && !this.state.loadedUsers) {\n        var activeConversation = this.props.activeConv;\n        apolloClient.query({\n          query: getConversationGql,\n          variables: {\n            activeConversation: activeConversation\n          }\n        }).then(function (response) {\n          var contrData = response.data.conversation.contributors;\n          var contributors = contrData.filter(function (u) {\n            return u.ethWallet !== null || u.ethWallet !== \"\";\n          });\n\n          if (contributors.length > 0) {\n            _this2.setState({\n              data: contributors,\n              loadedUsers: true,\n              targetAddress: contributors[0].ethWallet\n            });\n          } else {\n            _this2.closeDialog();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.show) {\n        return null;\n      }\n\n      this.getConvData();\n\n      if (this.state.data == null) {\n        return null;\n      }\n\n      return React.createElement(FormWindow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(TransferForm, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"Send to: \"), React.createElement(\"select\", {\n        className: \"selectField\",\n        onChange: this.selectTarget,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, this.state.data.map(function (u) {\n        return React.createElement(\"option\", {\n          key: u.id,\n          value: u.ethWallet,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }, u.nickname);\n      }))), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"Target wallet address: \"), React.createElement(\"input\", {\n        className: \"inputField\",\n        id: \"targetField\",\n        type: \"text\",\n        value: this.state.targetAddress,\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      })), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, \"Amount (max. \", this.props.teacheCoin.balance + \" \" + this.props.teacheCoin.symbol, \"): \"), React.createElement(\"input\", {\n        className: \"inputField\",\n        id: \"amountField\",\n        type: \"number\",\n        min: 0,\n        max: this.props.teacheCoin.balance,\n        placeholder: \"Amount to send, example: 100 \" + this.props.teacheCoin.symbol,\n        onChange: this.handleAmountChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }))), React.createElement(BackButton, {\n        onClick: this.closeDialog,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, \"CLOSE\"), React.createElement(SendButton, {\n        onClick: this.sendTokens,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, \"SEND\"));\n    }\n  }]);\n\n  return TokenTransferForm;\n}(Component);\nTokenTransferForm.propTypes = {\n  teacheCoin: PropTypes.object,\n  activeConv: PropTypes.number,\n  show: PropTypes.bool\n};\nexport default graphql(getConversationGql, {\n  options: function options(props) {\n    return {\n      variables: {\n        activeConv: props.activeConv\n      }\n    };\n  }\n})(TokenTransferForm);","map":{"version":3,"sources":["/home/przemek/Data/Programowanie/PWr/ZPI/Teache/src/components/Metamask.js"],"names":["React","Component","styled","PropTypes","getConversationGql","graphql","apolloClient","Text","div","FormWindow","MetamaskImage","img","BackButton","button","SendButton","TransferForm","form","InstallMetamask","props","show","close","propTypes","func","isRequired","bool","UnlockMetamask","TokenTransferForm","handleAmountChange","event","setState","amount","target","value","sendTokens","targetAddress","state","teacheCoin","balance","token","transfer","decimal","error","response","console","log","closeDialog","loadedUsers","selectTarget","data","activeConversation","activeConv","query","variables","then","contrData","conversation","contributors","filter","u","ethWallet","length","getConvData","map","id","nickname","symbol","object","number","options"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport styled from \"styled-components\"\nimport PropTypes from \"prop-types\"\n\nimport { getConversationGql } from '../queries/gql'\nimport { graphql } from 'react-apollo'\nimport { apolloClient } from '../apollo'\n\nconst Text = styled.div`\n    color: #000000\n\n    & > .metamask-title {\n        font-size: 3vh;\n    }\n\n    & > .metamask-message {\n        font-size: 1.5vh;\n    }\n\n    & > .metamask-unlock {\n        font-size: 2vh;\n    }\n\n    padding-top: 1em;\n`\n\nconst FormWindow = styled.div`\n    align-items: center;\n    text-align: center;\n    padding: 2vh 1.5vw 2vh 1.5vw;\n    z-index: 1000;\n    position: absolute;\n    background: #ffffff;\n    left: 50%;\n    top: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    border-radius: 15px;\n`\n\nconst MetamaskImage = styled.img`\n    max-width: 50vw;\n    max-height: 50vh;\n    height: auto;\n    width: auto;\n    object-fit: contain;\n`\n\nconst BackButton = styled.button`\n    background-color: palevioletred;\n    padding: 0.75rem 1.5rem;\n    color: white;\n    border: transparent;\n    margin-top: 2em;\n    margin-bottom: 2em;\n\n    border-radius: 0.5em;\n\n    &:hover {\n        background-color: darkvioletred;\n        border: 2px solid white;\n    }\n`\n\nconst SendButton = styled(BackButton)`\n    background-color: lightgreen;\n\n    &:hover {\n        background-color: darkgreen;\n        border: 2px solid white;\n    }\n\n    margin-left: 2vw;\n`\n\nconst TransferForm = styled.form`\n    & .inputField {\n        width: 24vw;\n        height: 4vh;\n        background: transparent;\n        border: 2px solid grey;\n        border-radius: 10px;\n        padding: 1.5vh 1vw 1.5vh 1vw;\n    }\n\n    & #amountField {\n        margin-left: 1vw;\n        margin-right: 1vw;\n    }\n\n    & .selectField {\n        width: 24vw;\n        height: 4vh;\n        background: transparent;\n        margin-left: 1vw;\n        margin-right: 1vw;\n        border: 2px solid grey;\n        border-radius: 10px;\n        text-indent: 1vw;\n    }\n`\n\nexport class InstallMetamask extends Component {\n    render() {\n        if(!this.props.show) {\n            return null\n        }\n\n        return (\n            <FormWindow>\n                <p className=\"image download-metamask\">\n                        <Text>\n                            <p className=\"metamask-title\">You have to install Metamask to use our token system!</p>\n                            <p className=\"metamask-message\">Click on the image below to install Metamask extension</p>\n                        </Text>\n                        <a href=\"https://metamask.io/\" rel=\"noopener noreferrer\" target=\"_blank\">\n                            <MetamaskImage src=\"https://metamask.io/img/metamask.png\" alt=\"Metamask icon\"/>\n                        </a>\n                    </p>\n                    <BackButton onClick={this.props.close}>CLOSE</BackButton>\n            </FormWindow>\n        )\n    }\n}\n\nInstallMetamask.propTypes = {\n    close: PropTypes.func.isRequired,\n    show: PropTypes.bool\n}\n\nexport class UnlockMetamask extends Component {\n    render() {\n        if(!this.props.show) {\n            return null\n        }\n\n        return (\n            <FormWindow>\n                <div className=\"notification is-danger\">\n                    <Text>\n                        <p className=\"metamask-unlock\">Your account is locked! Please unlock your Metamask vault!</p>\n                    </Text>\n                    <BackButton onClick={this.props.close}>CLOSE</BackButton>\n                </div>\n            </FormWindow>\n        )\n    }\n}\n\nexport class TokenTransferForm extends Component {\n    constructor() {\n        super()\n\n        this.state = {\n            amount: 0,\n            targetAddress: null,\n            data: null,\n            loadedUsers: false\n        }\n    }\n\n    getConvData() {\n        if (this.props.show && !this.state.loadedUsers) {\n            const activeConversation = this.props.activeConv\n            apolloClient.query({\n                query: getConversationGql, \n                variables: {\n                    activeConversation\n                } \n            }).then(response => {\n                const contrData = response.data.conversation.contributors\n                const contributors = contrData.filter(u => u.ethWallet !== null || u.ethWallet !== \"\")\n                if(contributors.length > 0) {\n                    this.setState({\n                        data: contributors,\n                        loadedUsers: true,\n                        targetAddress: contributors[0].ethWallet\n                    })\n                } else {\n                    this.closeDialog()\n                }\n            })\n        }\n    }  \n\n    handleAmountChange = (event) => {\n        this.setState({\n            amount: event.target.value\n        })\n    }\n\n    sendTokens = (targetAddress) => {\n        const amount = this.state.amount\n        const teacheCoin = this.props.teacheCoin\n\n        if(amount <= teacheCoin.balance && amount > 0) {\n            teacheCoin.token.transfer(this.state.targetAddress, amount * teacheCoin.decimal, (error, response) => {\n                if(error || error !== null) {\n                    console.log(error);\n                } else {\n                    this.closeDialog()\n                }\n            })\n        }\n    }\n\n    closeDialog = () => {\n        this.setState({\n            loadedUsers: false\n        })\n        this.props.close()\n    }\n\n    selectTarget = (event) => {\n        this.setState({\n            targetAddress: event.target.value\n        }, () => {\n            console.log(this.state.targetAddress)\n        })\n    }\n\n    render() {\n        if(!this.props.show) {\n            return null\n        }\n        \n        this.getConvData()\n\n        if(this.state.data == null) {\n            return null\n        }\n\n        return (\n            <FormWindow>\n                <TransferForm>\n                    <Text>\n                        <div>Send to: </div>\n                        <select className=\"selectField\" onChange={this.selectTarget}>\n                            {\n                                this.state.data.map(u => \n                                    <option key={u.id} value={u.ethWallet}>{u.nickname}</option>\n                                )\n                            }\n                        </select>\n                    </Text>\n                    <Text>\n                        <div>Target wallet address: </div>\n                        <input className=\"inputField\" id=\"targetField\" type=\"text\" value={this.state.targetAddress} disabled />\n                    </Text> \n                    <Text>\n                        <div>Amount (max. {this.props.teacheCoin.balance + \" \" + this.props.teacheCoin.symbol}): </div>\n                        <input \n                            className=\"inputField\"\n                            id=\"amountField\"\n                            type=\"number\" \n                            min={0} \n                            max={this.props.teacheCoin.balance} \n                            placeholder={\"Amount to send, example: 100 \" + this.props.teacheCoin.symbol}\n                            onChange={this.handleAmountChange} />\n                    </Text>\n                </TransferForm>\n                <BackButton onClick={this.closeDialog}>CLOSE</BackButton>\n                <SendButton onClick={this.sendTokens}>SEND</SendButton>\n            </FormWindow>\n        )\n    }\n}\n\nTokenTransferForm.propTypes = {\n    teacheCoin: PropTypes.object,\n    activeConv: PropTypes.number,\n    show: PropTypes.bool\n}\n\nexport default \n    graphql(getConversationGql, { \n        options: (props) => ({ \n            variables: { \n                activeConv: props.activeConv\n            } \n        })\n    })( TokenTransferForm );"]},"metadata":{},"sourceType":"module"}